#!/bin/bash
# ==============================================================================
# Leonardo Forge - The Leonardo AI USB Maker Assembly Script
# ==============================================================================
# Description: Assembles the modular parts of the Leonardo AI USB Maker
#              into a single, executable script.
# Author: Leonardo AI Team & Cascade
# Version: 1.0.0
# ==============================================================================

set -euo pipefail
IFS=$'\n\t'

# Script's own directory
FORGE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PARTS_DIR="${FORGE_DIR}/Parts"
OUTPUT_SCRIPT="${FORGE_DIR}/leonardo.sh"

# Ensure Parts directory exists
if [ ! -d "$PARTS_DIR" ]; then
    echo "Error: Parts directory not found at ${PARTS_DIR}"
    echo "Please create it: mkdir -p ${PARTS_DIR}"
    exit 1
fi

echo "ðŸ”¥ Forging Leonardo AI USB Maker script..."

# Start with a clean slate for the output script
>"${OUTPUT_SCRIPT}"

# Add the main shebang and initial comments/setup
cat << 'EOF' > "${OUTPUT_SCRIPT}"
#!/bin/bash
# ==============================================================================
# Leonardo AI USB Maker - Assembled Script
# ==============================================================================
# This script is auto-generated by leonardo_forge.sh.
# Do not edit this file directly. Edit the parts in the 'Parts' directory.
#
# Description: Creates bootable USB drives with AI models and tools
# Author: Leonardo AI Team
# Version: 5.0.0 (Assembled)
# License: MIT
# ==============================================================================

# Set strict mode
set -euo pipefail
IFS=$'\n\t'

# Global cleanup trap
# Individual parts can add to CLEANUP_CMDS array
CLEANUP_CMDS=()
cleanup() {
    local cmd
    echo "Performing cleanup..."
    for cmd in "${CLEANUP_CMDS[@]}"; do
        eval "$cmd" || echo "Warning: Cleanup command failed: $cmd"
    done
    # Add any other global cleanup tasks here if needed
    echo "Cleanup finished."
}
trap 'cleanup; exit 1' INT TERM ERR
trap 'cleanup' EXIT

# Script directory and name (for the assembled script)
SCRIPT_DIR_ASSEMBLED="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME_ASSEMBLED="$(basename "${BASH_SOURCE[0]}")"

# Secure umask
umask 077

# Placeholder for global variables and functions that need to be defined early.
# These will be sourced from specific part files.

EOF

# Define the order of assembly
# Add more parts here as they are created
PART_FILES=(
    # Core Setup
    "00_core_setup.sh"          # Basic script setup, SCRIPT_DIR, SCRIPT_NAME, etc.
    "01_global_variables.sh"    # Global constants, arrays, default settings
    "02_color_definitions.sh"   # Color codes for UI
    "03_logging_utils.sh"       # Logging functions (log_info, log_error, etc.)
    "04_error_handling.sh"      # Error handling, trap setups (can be expanded by parts)
    
    # Core Utilities
    "10_command_checks.sh"      # command_exists, check_dependencies
    "11_string_utils.sh"        # String manipulation functions
    "12_datetime_utils.sh"      # Date/time helper functions
    "13_misc_utils.sh"          # Other small utilities (e.g., human_readable_size)

    # UI Components
    "20_ui_layout.sh"           # print_hr, print_centered, print_section_header
    "21_ui_messages.sh"         # print_success, print_error, print_warning, print_info, print_debug
    "22_ui_interactive.sh"      # confirm, show_menu, progress_bar, spinner
    "23_ui_dialogs.sh"          # More complex dialogs if needed

    # Filesystem Operations
    "30_fs_checks.sh"           # is_block_device, get_fs_type
    "31_fs_mount_ops.sh"        # safe_mount, safe_umount
    "32_fs_format_ops.sh"       # create_filesystem
    "33_fs_partition_ops.sh"    # create_partition_table, create_partition
    "34_fs_file_ops.sh"         # dd_wrapper, copy_with_progress

    # Network Operations
    "40_network_checks.sh"      # check_url, get_public_ip
    "41_network_download.sh"    # fancy_download
    "42_network_checksum.sh"    # calculate_checksum, verify_checksum

    # Main Application Logic
    "50_config_parsing.sh"      # parse_arguments, load_config_file (if any)
    "51_initialization.sh"      # initialize_script (main setup calls)
    "52_usb_operations.sh"      # Functions related to USB creation, verification
    "53_model_management.sh"    # Functions for AI model handling
    "54_main_menu.sh"           # show_main_menu and its handlers
    
    # Script Entry Point / Main Execution
    "99_main_execution.sh"      # The main function call or primary execution block
)

echo "Concatenating parts..."
for part_file in "${PART_FILES[@]}"; do
    local part_path="${PARTS_DIR}/${part_file}"
    if [ -f "$part_path" ]; then
        echo "Appending: ${part_file}"
        # Add a newline and a comment indicating the start of the part
        echo -e "\n# --- BEGIN ${part_file} ---\n" >> "${OUTPUT_SCRIPT}"
        cat "$part_path" >> "${OUTPUT_SCRIPT}"
        echo -e "\n# --- END ${part_file} ---\n" >> "${OUTPUT_SCRIPT}"
    else
        echo "Warning: Part file not found, skipping: ${part_path}" # This is expected initially
    fi
done

# Make the assembled script executable
chmod +x "${OUTPUT_SCRIPT}"

echo "âœ… Leonardo AI USB Maker forged successfully: ${OUTPUT_SCRIPT}"
echo "Run it with: sudo ./${OUTPUT_SCRIPT##*/}"
